I have been studying this subject for a few weeks now, but now I am filling out a github. Mianly for my own use but also to evidence my learning journey. 
What's nice is that I hav ebeen doing abit of hobbying here and there since 2017, so I already had a wireless USB adapter router and am use to kali linux.



04/06/2025 Today I finished the WPA2 lab and wrote a script to capture packets as I got fed up typing the commands. 
            Also covered WEP cracking don't have any devices that support WEP though so just the thoery.  
            Within the WEP I used aircrack-ng on the .cap file and it found one potential target but no key found. 
            You would normally IF there is a wep device connected a KEY FOUND and then the [ 11:22:33:44:55 ] which you would then remove the colons from the pwd and then you can connect to the wifi as this is the PWD without the colons. 
            If there is not enough traffic, you can use a deauth attack to force the Access Point (AP) to communicate with me. 
            So then we can associate with the AP 
            sudo airodump-ng --bssid {MAC} --channel {#} --write [filename] [interfaceID]
            Now I am capturing and now I associate by 
            sudo aireplay-ng --fakeauth [0] (This is only do it once) -a [target network MAC] -h [my usb adapter MAC] (ifconfig first 12 digits and replace dash with colons.) [interface ID of USB adapter] 
            This will force the AP to communicate with me. I am not connected at this point, I am just communicating with it.   
            Now we run an ARP attack 
            sudo aireplay-ng --arpreplay -b {target network MAC}  -h [my usb adapter MAC] [interface ID of USB adapter] 
            My wireless adapter waits for an ARP packet capture it and retransmit it. The the AP will be forced to generate a new packet with a new IV. This will force the AP to continue to generate new packets with new IV's.  
            Then I can aircrack it 
            aircrack-ng [filename .cap] 
            KEY FOUND [ PWD remove colons] 


05/06/2025 Today, I am redoing my WPA/WPA2 cracking lab as it's important.  
            sudo wash --interface [my interface] 

            Seems that my reaver is outdated, so can't run brute force attacks on my network. will need an updated version. Going to follow along anyway. 

            Going to begin RF hacking course as well. Ordering HackRF one today and following a basics and then the Michael Olsson YT lecture series to learn GNU Radio Companion as well as GPS spoofing RFID cloning (all my own equipment to be clear ;))

            Having issues finding enough equipment to hack so need to buy some. I will finish WPA2 today and then move onto PMPA and begin the burp suite lectures. 

            Had a brain wave. I am going to use my old Android as an AP and hack that. Hurrah

            Also realised I have never done a RAM dump, so signed up for try hack me for the windows RAM dump lab for unstrucured data analysis. 

            Whats interesting is that if WPS is disabled on the target network or WPS is enabled but uses Push Button (PBC) the method I just did won't work. 
            The only packets that contain useful info is the handshake packets
            airodump-ng then 
            whoops broke my VM completley going to reinstall and fix the VM tomorrow. 

06/06/2025 Another day in paradise. WPA/WPA2 will be done today as my VM broke (well done) and I have now restored it, hurrah. OK lets document the WPA2 handshake lab proper like. 
            Handshake packets only please. So I have set up my andorid phone to be an AP 

            sudo airodump-ng --bssid [AndroidAP MAC] --channel [ch of AP] --write [filename] wlan0

            So I have connected my phone to the AP to capture the handshake, hopefully. 

            If no one is connecting, you need to force a reconnect.

            aireplayer-ng --deauth 4 -a [Target network MAC] -c [client MAC] wlan0 

            I have the handshake now so going to crack. It doesn't carry the PWD. 
            So we will create a wordlist/dictionary using crunch. 

            Option            Description
            Min/Max Length    Set PWD size
            Char Set          Define allowed characters
            Pattern (-t)      Generate based on known info
            Output (-o)       Save wordlist to file
            No Repeating (-p) Tells crunch to not repeat characters

            crunch 6 8 abc12 -o text.txt
            run this cmd and got 484375 lines 
            crunch 7 7 abc12 -o text.txt -t a@@@@b (this create PWD's based on anything possible from a to b)
            Reduced it to 625 pwd's. 
            Can also use existing wordlists. 

            So you need to capture handshake and have a pre-prepared wordlist. 
            
            How Aircrack-ng works
            Extracts the MIC (Message Integrity Code) 
            Tries each PWD from the wordlist (duh)
            Generates a new MIC and compares it with the original
            If they match, we have the PWD! Hurrah 

            sudo aircrack-ng wpa_handshake_AndroidAP-01.cap -w test.txt
            should only take 200 days (that's fine)
            hmm maybe not lets make it smarter. Its running so lets add the real PWD and reduce the size to actually crack it. 
            
            so created a much smaller one 
            crunch 8 8 abc12 -o test2.txt -t a@@@@@@b 
            This created a much smaller file and now I will leafpad the text file and add the password to test if this has worked. 
            
            leafpad test2.txt
            
            so let's test without taking six months. 
            OH now it will take 145 days. So now I have put the PWD at the fifth line, ain't nobody got time for this. 

            KEY FOUND! [AndroidAP Key ;)] 

            Wordlist attacks are currently the only know methood for cracking wpa2, but there are methods using your GPU or online service (not going to do that) in order to speed it up. 
            You could use evil-twin attacks to get a user to send you their password, but this will be covered later. 
            Quiz time. 92% not bad
            Ok cool it works now onto the next subject, which is network recon and post access methods. 

            nMap (nice ;)
            I should read the book on nMap
            ZenMap

            Covered quick scans and ping scans. Simple but useful 
            quick scan plus 
            The Quick Scan Plus shows way more info, including software connecting, etc
            Services are interesting in the scan. 
            If you see an SSH service, you need a login/pwd. iOS device by default does not have an SSH server. But when you jailbreak an iphone it automatically installs an ssh server.
            The default PWD for this SSH server is alpine. Not many people know this about jailbroken iOS phones, so this is a good way to access an iPhone because even those who know most of the time are too lazy to change this PWD. 
            Port 22 SSH server. 

            ssh root@[IP of phone]
            password: alpine
            You're in as root :)

            Quiz time. 92% not bad 

            Going to stop for now, have to look after little man. 
            Done with wifi hacking for now, going to move back to PMPA for a bit and start RF once my hackrf one arrives, which should be this evening, fingers crossed. 


07/06/2025  Birthday weekend, so will only do labs today out tomorrow with friends. Not so daily after all, I guess. 
            Anyway, PMPA today's practical lab work. Injured \Android is working lab setup theory done, so going to make a new mind map for the PMPA practical skills.

            My Hack RF one arrived but with no aerial so that arrives tomorrow which is anoying but at least my refresher on Wifi cracking is done and I can get some PMPA done before going out tomorrow. 

            OK so Androidmanifest.xml added the full file with some notes understanding how it works and what to look out for. Also installed strings as I am using windows powershell.  
            I will write a full file on this and a mindmap. I have completed the theory for manual static analysis and a basic mindmap, including using apktool JADX and how to find hardcoded strings. 
            Next, I will cover Injured Android Static Analysis Flags 1 to 4. I will be switching between static analysis PMPA and a basic RF SDR hacking course once my antenna arrives. 
            I will need to write all this work up properly at some point into proper lab reports. 
            
            
